name: Technology API CI/CD Pipeline

on: push

env:
  HELM_EXPERIMENTAL_OCI: 1
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  NAMESPACE: thoughtworks-developer
  REPOSITORY: technology-api
  CONTAINER_REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 15
        uses: actions/setup-java@v2
        with:
          java-version: '15'
          distribution: 'adopt'
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean package -Dmaven.test.skip=true
      - uses: actions/upload-artifact@v2
        with:
          name: jarpack
          path: ./target/*.jar
  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with: 
          name: jarpack
      - name: Build Docker image
        run: |
          docker build --build-arg JAR_FILE=*.jar -t $NAMESPACE/$REPOSITORY .
      - uses: secrethub/actions/env-export@v0.1.0
        env:
          APP_VERSION: 0.0.1
          SECRETHUB_CREDENTIAL: ${{ secrets.SECRETHUB_CREDENTIAL }}
          CONTAINER_REGISTRY_USER: secrethub://thoughtworks-developer/technology-api/github/user
          CONTAINER_REGISTRY_PASSWORD: secrethub://thoughtworks-developer/technology-api/github/password
      - name: push docker image
        run: |
          echo "$CONTAINER_REGISTRY_PASSWORD" | docker login ${{ env.CONTAINER_REGISTRY }} --username "$CONTAINER_REGISTRY_USER" --password-stdin
          docker tag ${{ env.NAMESPACE }}/${{ env.REPOSITORY }} ${{ env.CONTAINER_REGISTRY }}/${{ env.NAMESPACE }}/${{ env.REPOSITORY }}:0.0.1
          docker push ${{ env.CONTAINER_REGISTRY }}/${{ env.NAMESPACE }}/${{ env.REPOSITORY }}:0.0.1
  release:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: install helm
        uses: Azure/setup-helm@v1
      - uses: chrisdickinson/setup-yq@latest
      - uses: secrethub/actions/env-export@v0.1.0
        env:
          SECRETHUB_CREDENTIAL: ${{ secrets.SECRETHUB_CREDENTIAL }}
          CONTAINER_REGISTRY_USER: secrethub://thoughtworks-developer/technology-api/github/user
          CONTAINER_REGISTRY_PASSWORD: secrethub://thoughtworks-developer/technology-api/github/password
      - name: publish helm chart
        run: |
          echo "$CONTAINER_REGISTRY_PASSWORD" | helm registry login ${{ env.CONTAINER_REGISTRY }} --username "$CONTAINER_REGISTRY_USER" --password-stdin
          helm chart save charts/. ${{ env.CONTAINER_REGISTRY }}/${{ env.NAMESPACE }}/${{ env.REPOSITORY }}:0.1.0
          helm chart push ${{ env.CONTAINER_REGISTRY }}/${{ env.NAMESPACE }}/${{ env.REPOSITORY }}:0.1.0
  provision:
    runs-on: ubuntu-latest
    steps:
      - name: Install OpenShift
        uses: redhat-actions/oc-installer@v1
        with:
          oc_version: '4.6'
      - name: Test oc
        run: oc version --client

      - name: Install kubectl
        uses: azure/setup-kubectl@v1

      - name: Test kubectl
        run:
          kubectl version --client --short

      - uses: actions/checkout@v2

      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        env:
          # These can be stored in secrets, if desired.
          OPENSHIFT_USER: salman-siddiqui
          OPENSHIFT_NAMESPACE: salman-siddiqui-dev
          OPENSHIFT_TOKEN: sha256~vv6aZ1QizlilTynZB8BX-MUDNF_3TyX2dVYmo77ietw
          OPENSHIFT_SERVER: https://api.sandbox-m2.ll9k.p1.openshiftapps.com:6443

        with:
          # URL to your OpenShift cluster.
          # Refer to Step 2.
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}

          # Authentication Token. Can use username and password instead.
          # Refer to Step 3.
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}

          # Credentials, if desired instead of token.
          # Username and password override token if they are set.
          openshift_username: ${{ env.OPENSHIFT_USER }}
          openshift_password: ${{ secrets.OPENSHIFT_PASSWORD }}

          # Disables SSL cert checking. Use this if you don't have the certificate authority data.
          insecure_skip_tls_verify: true
          # This method is more secure, if the certificate from Step 4 is available.
          certificate_authority_data: ${{ secrets.CA_DATA }}

          # Optional - this sets your Kubernetes context's current namespace after logging in.
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}
  deploy:
    runs-on: 'ubuntu-latest'
    steps:
    - name: 'Deploy'
      uses: 'deliverybot/helm@v1'
      with:
        # Task remove means to remove the helm release.
        task: 'remove'
        release: 'review-myapp-${{ github.event.pull_request.number }}'
        version: '${{ github.sha }}'
        track: 'stable'
        chart: 'app'
        namespace: 'example-helm'
        token: '${{ github.token }}'
      env:
        KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'